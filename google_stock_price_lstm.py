# -*- coding: utf-8 -*-
"""Google_Stock_Price_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l0OHFV-kIDOlINUxiS-B-OyUAaqkvqtL
"""

#Mounting Google Co-laboratory

from google.colab import drive
drive.mount('/content/drive/')

#Importing necessary Libraries

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Loading dataset

dataset_train = pd.read_csv("/content/drive/My Drive/DeepLearning/RNN_with_Keras/Google_Stock_Price_Train.csv")

#Structure of the dataset
#Here I will be using only the Opening price of each day(from 2012 to 2016) to train the model

dataset_train.head(5)

#Taking the Opening stock price data in the training dataset

training_set = dataset_train.iloc[:, 1:2].values



"""Visualizing the Data using MATPLOTLIB (Date vs Opening Stock price)"""

#Plotting the opening stock price from 2012 to 2016

price=np.array(training_set)

time=dataset_train.iloc[:, 0:1].values
years=np.array(time)


x=years[:,0]
y=price[:,0]

plt.plot(x,y)
plt.title('Opening price curve from 2012 to 2016')
plt.xlabel('TIME==>')
plt.ylabel('PRICE==>')
plt.show()

"""FEATURE SCALING

Feature scaling is done to scale the data in order to achieve better convergence and learning.

1.   Standardisation:     (x-mean(x))/(standard daviation(x))

2.   Normalisation:         (x-min(x))/(max(x)-min(x))

Here I will be using normalization because in the output layer sigmoid curve will be used as activation function.
"""

#Here I will be using Normalization using the scikit-learn library.

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)

# Creating a data structure with 60 timesteps and 1 output: 60 previous observations are considered to predict the current stock price

X_train = []   #Initialize training data
y_train = []   #Initialize testing data

for i in range(60, 1258):
    X_train.append(training_set_scaled[i-60:i, 0])
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

# Reshaping the training data to get 3D Dimentionality with one indicator

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Importing the Keras libraries and packages

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

# Initialising the RNN (Since predicting a continuous value, hence using regressor)

regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation to reduce overfitting and improve generalization error

regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation (no return sequence since it is the last layer)

regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer (a fully connected layer using the Dense class) with single output

regressor.add(Dense(units = 1))

# Compiling the RNN

regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set

regressor.fit(X_train, y_train, epochs = 100, batch_size = 32)

"""Making the predictions and visualizing the results."""

# Getting the real stock price of 2017

dataset_test = pd.read_csv("/content/drive/My Drive/DeepLearning/RNN_with_Keras/Google_Stock_Price_Test.csv")
real_stock_price = dataset_test.iloc[:, 1:2].values

#Visualizing the Stock Price Curve of January 2017
rsp=np.array(real_stock_price)
T=dataset_test.iloc[:, 0:1].values

a=rsp[:,0]
b=T[:,0]

plt.plot(b,a)
plt.title("Stock Price Curve of January 2017")
plt.xlabel('Time==>')
plt.ylabel('Price==>')
plt.show()

# Getting the predicted stock price of 2017

dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, 80):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

# Visualising the results

plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()